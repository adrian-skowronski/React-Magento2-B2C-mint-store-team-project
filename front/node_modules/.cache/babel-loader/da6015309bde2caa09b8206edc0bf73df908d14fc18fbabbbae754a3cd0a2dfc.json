{"ast":null,"code":"var _jsxFileName = \"/home/adrian-skowronski/www/mint/front/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\n\n// Zapytanie GraphQL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_USER_SESSION = gql`\n  query GetUserSession {\n    userSession {\n      isLoggedIn\n      user {\n        id\n        name\n      }\n    }\n  }\n`;\n\n// Typy kontekstu autoryzacji\n\n// Tworzenie kontekstu\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_USER_SESSION);\n  useEffect(() => {\n    // Sprawdzamy stan logowania po uzyskaniu danych z GraphQL\n    if (!loading && data) {\n      setIsLoggedIn(data.userSession.isLoggedIn);\n    }\n  }, [data, loading]);\n  const login = () => setIsLoggedIn(true);\n  const logout = () => setIsLoggedIn(false);\n\n  // Możesz dodać obsługę błędów tutaj, np. gdy serwer zwróci błąd\n  if (error) {\n    console.error(\"Błąd podczas sprawdzania sesji użytkownika:\", error);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n// Użycie kontekstu\n_s(AuthProvider, \"AcpA2RZSdSWxYxJx+a3hIhvfIHk=\", false, function () {\n  return [useQuery];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","gql","useQuery","jsxDEV","_jsxDEV","GET_USER_SESSION","AuthContext","undefined","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","data","loading","error","userSession","login","logout","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/home/adrian-skowronski/www/mint/front/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { gql, useQuery } from '@apollo/client';\n\n// Zapytanie GraphQL\nconst GET_USER_SESSION = gql`\n  query GetUserSession {\n    userSession {\n      isLoggedIn\n      user {\n        id\n        name\n      }\n    }\n  }\n`;\n\n// Typy kontekstu autoryzacji\ninterface AuthContextType {\n    isLoggedIn: boolean;\n    login: () => void;\n    logout: () => void;\n}\n\n// Tworzenie kontekstu\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const { data, loading, error } = useQuery(GET_USER_SESSION);\n\n    useEffect(() => {\n        // Sprawdzamy stan logowania po uzyskaniu danych z GraphQL\n        if (!loading && data) {\n            setIsLoggedIn(data.userSession.isLoggedIn);\n        }\n    }, [data, loading]);\n\n    const login = () => setIsLoggedIn(true);\n    const logout = () => setIsLoggedIn(false);\n\n    // Możesz dodać obsługę błędów tutaj, np. gdy serwer zwróci błąd\n    if (error) {\n        console.error(\"Błąd podczas sprawdzania sesji użytkownika:\", error);\n    }\n\n    return (\n        <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\n// Użycie kontekstu\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAmB,OAAO;AACxF,SAASC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,gBAAgB,GAAGJ,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAOA;AACA,MAAMK,WAAW,gBAAGT,aAAa,CAA8BU,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAA+C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM;IAAEa,IAAI;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGb,QAAQ,CAACG,gBAAgB,CAAC;EAE3DN,SAAS,CAAC,MAAM;IACZ;IACA,IAAI,CAACe,OAAO,IAAID,IAAI,EAAE;MAClBD,aAAa,CAACC,IAAI,CAACG,WAAW,CAACL,UAAU,CAAC;IAC9C;EACJ,CAAC,EAAE,CAACE,IAAI,EAAEC,OAAO,CAAC,CAAC;EAEnB,MAAMG,KAAK,GAAGA,CAAA,KAAML,aAAa,CAAC,IAAI,CAAC;EACvC,MAAMM,MAAM,GAAGA,CAAA,KAAMN,aAAa,CAAC,KAAK,CAAC;;EAEzC;EACA,IAAIG,KAAK,EAAE;IACPI,OAAO,CAACJ,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;EACvE;EAEA,oBACIX,OAAA,CAACE,WAAW,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAEV,UAAU;MAAEM,KAAK;MAAEC;IAAO,CAAE;IAAAT,QAAA,EACtDA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;;AAED;AAAAf,EAAA,CA1BaF,YAA+C;EAAA,QAEvBN,QAAQ;AAAA;AAAAwB,EAAA,GAFhClB,YAA+C;AA2B5D,OAAO,MAAMmB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,MAAMC,OAAO,GAAG/B,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAI,CAACuB,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAClE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
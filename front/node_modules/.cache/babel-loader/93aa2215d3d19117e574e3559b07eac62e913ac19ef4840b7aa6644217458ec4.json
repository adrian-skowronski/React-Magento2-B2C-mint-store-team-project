{"ast":null,"code":"var _jsxFileName = \"/home/adrian-skowronski/www/mint/front/src/components/WishlistButton/WishlistButton.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WishlistButton = ({\n  productId,\n  sku,\n  wishlistId,\n  favorites,\n  toggleFavorite\n}) => {\n  _s();\n  const [message, setMessage] = useState(null);\n  const handleAddToWishlist = async () => {\n    const token = sessionStorage.getItem('auth_token');\n    if (!token) {\n      setMessage('Musisz być zalogowany, aby dodać produkt do listy życzeń.');\n      setTimeout(() => setMessage(null), 3000);\n      return;\n    }\n    if (wishlistId) {\n      const mutation = `\n                mutation {\n                    addProductsToWishlist(\n                        wishlistId: ${wishlistId}\n                        wishlistItems: [\n                            { sku: \"${sku}\", quantity: 1 }\n                        ]\n                    ) {\n                        wishlist {\n                            id\n                            items_count\n                        }\n                    }\n                }\n            `;\n      try {\n        const response = await fetch('http://mint.local/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            query: mutation\n          })\n        });\n        if (response.ok) {\n          setMessage('Produkt został dodany do listy życzeń!');\n          toggleFavorite(productId);\n        } else {\n          setMessage('Wystąpił błąd przy dodawaniu do listy życzeń.');\n        }\n      } catch (error) {\n        console.error(\"Błąd podczas dodawania do wishlisty:\", error);\n        setMessage('Wystąpił błąd przy dodawaniu do listy życzeń.');\n      } finally {\n        setTimeout(() => setMessage(null), 3000);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `icon-heart ${favorites.includes(productId) ? 'active' : ''}`,\n      onClick: handleAddToWishlist,\n      children: \"\\u2665\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(WishlistButton, \"oxT8SEz5FIjvFP5ix50Ku0sapH4=\");\n_c = WishlistButton;\nexport default WishlistButton;\nvar _c;\n$RefreshReg$(_c, \"WishlistButton\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","WishlistButton","productId","sku","wishlistId","favorites","toggleFavorite","_s","message","setMessage","handleAddToWishlist","token","sessionStorage","getItem","setTimeout","mutation","response","fetch","method","headers","body","JSON","stringify","query","ok","error","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","includes","onClick","_c","$RefreshReg$"],"sources":["/home/adrian-skowronski/www/mint/front/src/components/WishlistButton/WishlistButton.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\ninterface WishlistButtonProps {\n    productId: number;\n    sku: string;\n    wishlistId: number | null;\n    favorites: number[];\n    toggleFavorite: (productId: number) => void;\n}\n\nconst WishlistButton: React.FC<WishlistButtonProps> = ({ productId, sku, wishlistId, favorites, toggleFavorite }) => {\n    const [message, setMessage] = useState<string | null>(null);\n\n    const handleAddToWishlist = async () => {\n        const token = sessionStorage.getItem('auth_token');\n        if (!token) {\n            setMessage('Musisz być zalogowany, aby dodać produkt do listy życzeń.');\n            setTimeout(() => setMessage(null), 3000);\n            return;\n        }\n\n        if (wishlistId) {\n            const mutation = `\n                mutation {\n                    addProductsToWishlist(\n                        wishlistId: ${wishlistId}\n                        wishlistItems: [\n                            { sku: \"${sku}\", quantity: 1 }\n                        ]\n                    ) {\n                        wishlist {\n                            id\n                            items_count\n                        }\n                    }\n                }\n            `;\n\n            try {\n                const response = await fetch('http://mint.local/graphql', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${token}`,\n                    },\n                    body: JSON.stringify({ query: mutation }),\n                });\n\n                if (response.ok) {\n                    setMessage('Produkt został dodany do listy życzeń!');\n                    toggleFavorite(productId);\n                } else {\n                    setMessage('Wystąpił błąd przy dodawaniu do listy życzeń.');\n                }\n            } catch (error) {\n                console.error(\"Błąd podczas dodawania do wishlisty:\", error);\n                setMessage('Wystąpił błąd przy dodawaniu do listy życzeń.');\n            } finally {\n                setTimeout(() => setMessage(null), 3000);\n            }\n        }\n    };\n\n    return (\n        <div>\n            {message && <div className=\"notification\">{message}</div>}\n            <span\n                className={`icon-heart ${favorites.includes(productId) ? 'active' : ''}`}\n                onClick={handleAddToWishlist}\n            >\n                ♥\n            </span>\n        </div>\n    );\n};\n\nexport default WishlistButton;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUxC,MAAMC,cAA6C,GAAGA,CAAC;EAAEC,SAAS;EAAEC,GAAG;EAAEC,UAAU;EAAEC,SAAS;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACjH,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAE3D,MAAMY,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC;IAClD,IAAI,CAACF,KAAK,EAAE;MACRF,UAAU,CAAC,2DAA2D,CAAC;MACvEK,UAAU,CAAC,MAAML,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;MACxC;IACJ;IAEA,IAAIL,UAAU,EAAE;MACZ,MAAMW,QAAQ,GAAG;AAC7B;AACA;AACA,sCAAsCX,UAAU;AAChD;AACA,sCAAsCD,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;MAED,IAAI;QACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAA2B,EAAE;UACtDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,UAAUR,KAAK;UACpC,CAAC;UACDS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,KAAK,EAAER;UAAS,CAAC;QAC5C,CAAC,CAAC;QAEF,IAAIC,QAAQ,CAACQ,EAAE,EAAE;UACbf,UAAU,CAAC,wCAAwC,CAAC;UACpDH,cAAc,CAACJ,SAAS,CAAC;QAC7B,CAAC,MAAM;UACHO,UAAU,CAAC,+CAA+C,CAAC;QAC/D;MACJ,CAAC,CAAC,OAAOgB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC5DhB,UAAU,CAAC,+CAA+C,CAAC;MAC/D,CAAC,SAAS;QACNK,UAAU,CAAC,MAAML,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;MAC5C;IACJ;EACJ,CAAC;EAED,oBACIT,OAAA;IAAA2B,QAAA,GACKnB,OAAO,iBAAIR,OAAA;MAAK4B,SAAS,EAAC,cAAc;MAAAD,QAAA,EAAEnB;IAAO;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACzDhC,OAAA;MACI4B,SAAS,EAAE,cAAcvB,SAAS,CAAC4B,QAAQ,CAAC/B,SAAS,CAAC,GAAG,QAAQ,GAAG,EAAE,EAAG;MACzEgC,OAAO,EAAExB,mBAAoB;MAAAiB,QAAA,EAChC;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;AAACzB,EAAA,CAhEIN,cAA6C;AAAAkC,EAAA,GAA7ClC,cAA6C;AAkEnD,eAAeA,cAAc;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
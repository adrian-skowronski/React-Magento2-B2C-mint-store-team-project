{"ast":null,"code":"// import React, { useState } from 'react';\n// import { useCart } from '../../context/CartContext';\n// import { useNavigate } from 'react-router-dom';\n//\n// const PaymentPage: React.FC = () => {\n//     const { items, total, clearCart, setPaymentMethod, placeOrder, shippingAddress } = useCart();\n//     const [paymentMethod, setPaymentMethodState] = useState(\"checkmo\");\n//     const [error, setError] = useState<string | null>(null);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const navigate = useNavigate();\n//\n//     const handlePaymentMethodChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         setPaymentMethodState(e.target.value);\n//     };\n//\n//     const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n//         e.preventDefault();\n//         setIsLoading(true);\n//         setError(null);\n//\n//         try {\n//             if (shippingAddress) {\n//                 await setPaymentMethod(paymentMethod);\n//                 const orderNumber = await placeOrder();\n//\n//                 if (orderNumber) {\n//                     clearCart();\n//                     navigate(`/order/${orderNumber}`);\n//                 } else {\n//                     setError(\"Wystąpił problem z przetworzeniem zamówienia.\");\n//                 }\n//             } else {\n//                 setError(\"Adres dostawy jest wymagany.\");\n//             }\n//         } catch (error) {\n//             setError(\"Wystąpił błąd podczas składania zamówienia.\");\n//         } finally {\n//             setIsLoading(false);\n//         }\n//     };\n//\n//     return (\n//         <div>\n//             <h2>Płatność</h2>\n//             <form onSubmit={handleSubmit}>\n//                 <h3>Metoda płatności</h3>\n//                 <label>\n//                     <input type=\"radio\" value=\"checkmo\" checked={paymentMethod === 'checkmo'} onChange={handlePaymentMethodChange} />\n//                     Płatność przy odbiorze\n//                 </label>\n//                 <label>\n//                     <input type=\"radio\" value=\"banktransfer\" checked={paymentMethod === 'banktransfer'} onChange={handlePaymentMethodChange} />\n//                     Przelew bankowy\n//                 </label>\n//\n//                 {error && <div style={{ color: 'red' }}>{error}</div>}\n//                 <button type=\"submit\" disabled={isLoading}>\n//                     {isLoading ? 'Przetwarzanie...' : 'Złóż zamówienie'}\n//                 </button>\n//             </form>\n//             <h3>Podsumowanie zamówienia</h3>\n//             <ul>\n//                 {items.map(item => (\n//                     <li key={item.itemId}>\n//                         {item.name} - {item.quantity} x {item.price} PLN\n//                     </li>\n//                 ))}\n//             </ul>\n//             <p>Całkowity koszt: {total} PLN</p>\n//         </div>\n//     );\n// };\n//\n// export default PaymentPage;","map":{"version":3,"names":[],"sources":["/home/adrian-skowronski/www/mint/front/src/pages/Checkout/PaymentPage.tsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import { useCart } from '../../context/CartContext';\n// import { useNavigate } from 'react-router-dom';\n//\n// const PaymentPage: React.FC = () => {\n//     const { items, total, clearCart, setPaymentMethod, placeOrder, shippingAddress } = useCart();\n//     const [paymentMethod, setPaymentMethodState] = useState(\"checkmo\");\n//     const [error, setError] = useState<string | null>(null);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const navigate = useNavigate();\n//\n//     const handlePaymentMethodChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         setPaymentMethodState(e.target.value);\n//     };\n//\n//     const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n//         e.preventDefault();\n//         setIsLoading(true);\n//         setError(null);\n//\n//         try {\n//             if (shippingAddress) {\n//                 await setPaymentMethod(paymentMethod);\n//                 const orderNumber = await placeOrder();\n//\n//                 if (orderNumber) {\n//                     clearCart();\n//                     navigate(`/order/${orderNumber}`);\n//                 } else {\n//                     setError(\"Wystąpił problem z przetworzeniem zamówienia.\");\n//                 }\n//             } else {\n//                 setError(\"Adres dostawy jest wymagany.\");\n//             }\n//         } catch (error) {\n//             setError(\"Wystąpił błąd podczas składania zamówienia.\");\n//         } finally {\n//             setIsLoading(false);\n//         }\n//     };\n//\n//     return (\n//         <div>\n//             <h2>Płatność</h2>\n//             <form onSubmit={handleSubmit}>\n//                 <h3>Metoda płatności</h3>\n//                 <label>\n//                     <input type=\"radio\" value=\"checkmo\" checked={paymentMethod === 'checkmo'} onChange={handlePaymentMethodChange} />\n//                     Płatność przy odbiorze\n//                 </label>\n//                 <label>\n//                     <input type=\"radio\" value=\"banktransfer\" checked={paymentMethod === 'banktransfer'} onChange={handlePaymentMethodChange} />\n//                     Przelew bankowy\n//                 </label>\n//\n//                 {error && <div style={{ color: 'red' }}>{error}</div>}\n//                 <button type=\"submit\" disabled={isLoading}>\n//                     {isLoading ? 'Przetwarzanie...' : 'Złóż zamówienie'}\n//                 </button>\n//             </form>\n//             <h3>Podsumowanie zamówienia</h3>\n//             <ul>\n//                 {items.map(item => (\n//                     <li key={item.itemId}>\n//                         {item.name} - {item.quantity} x {item.price} PLN\n//                     </li>\n//                 ))}\n//             </ul>\n//             <p>Całkowity koszt: {total} PLN</p>\n//         </div>\n//     );\n// };\n//\n// export default PaymentPage;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
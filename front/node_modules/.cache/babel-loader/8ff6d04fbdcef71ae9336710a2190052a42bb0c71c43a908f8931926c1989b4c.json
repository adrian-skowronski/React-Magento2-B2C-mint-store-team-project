{"ast":null,"code":"var _jsxFileName = \"/home/adrian-skowronski/www/mint/front/src/pages/ProductDetail/ProductDetail.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './ProductDetail.scss';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProductDetail = () => {\n  _s();\n  const {\n    sku\n  } = useParams(); // Zmieniamy na sku\n  const [product, setProduct] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProductDetails = async () => {\n      const query = `\n                {\n                    products(\n                        filter: {\n                            sku: {\n                                eq: \"${sku}\"\n                            }\n                        },\n                        pageSize: 1,\n                        currentPage: 1\n                    ) {\n                        items {\n                            id\n                            name\n                            description\n                            price {\n                                regularPrice {\n                                    amount {\n                                        value\n                                        currency\n                                    }\n                                }\n                            }\n                            small_image {\n                                url\n                                label\n                            }\n                        }\n                    }\n                }\n            `;\n      try {\n        const response = await fetch('http://mint.local/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setProduct(data.data.products.items[0]); // Ustawiamy pierwszy produkt\n      } catch (err) {\n        if (err instanceof Error) {\n          setError(err.message);\n        } else {\n          setError('An unknown error occurred');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProductDetails();\n  }, [sku]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"product-detail\",\n    children: product && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: product.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this), product.small_image && product.small_image.url ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: product.small_image.url,\n        alt: product.small_image.label,\n        className: \"product-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No image available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: product.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Price: \", product.price.regularPrice.amount.value, \" \", product.price.regularPrice.amount.currency]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(ProductDetail, \"Abr112Pe6NKHog7Dz5GVmkSQh8Y=\", false, function () {\n  return [useParams];\n});\n_c = ProductDetail;\nexport default ProductDetail;\nvar _c;\n$RefreshReg$(_c, \"ProductDetail\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","ProductDetail","_s","sku","product","setProduct","loading","setLoading","error","setError","fetchProductDetails","query","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","products","items","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","name","small_image","url","src","alt","label","description","price","regularPrice","amount","value","currency","_c","$RefreshReg$"],"sources":["/home/adrian-skowronski/www/mint/front/src/pages/ProductDetail/ProductDetail.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './ProductDetail.scss';\n\ninterface Product {\n    id: number;\n    name: string;\n    description: string;\n    price: {\n        regularPrice: {\n            amount: {\n                value: number;\n                currency: string;\n            };\n        };\n    };\n    small_image?: {\n        url?: string;\n        label?: string;\n    };\n}\n\nconst ProductDetail: React.FC = () => {\n    const { sku } = useParams<{ sku: string }>(); // Zmieniamy na sku\n    const [product, setProduct] = useState<Product | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const fetchProductDetails = async () => {\n            const query = `\n                {\n                    products(\n                        filter: {\n                            sku: {\n                                eq: \"${sku}\"\n                            }\n                        },\n                        pageSize: 1,\n                        currentPage: 1\n                    ) {\n                        items {\n                            id\n                            name\n                            description\n                            price {\n                                regularPrice {\n                                    amount {\n                                        value\n                                        currency\n                                    }\n                                }\n                            }\n                            small_image {\n                                url\n                                label\n                            }\n                        }\n                    }\n                }\n            `;\n\n            try {\n                const response = await fetch('http://mint.local/graphql', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({ query }),\n                });\n\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n\n                const data = await response.json();\n                setProduct(data.data.products.items[0]); // Ustawiamy pierwszy produkt\n            } catch (err) {\n                if (err instanceof Error) {\n                    setError(err.message);\n                } else {\n                    setError('An unknown error occurred');\n                }\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchProductDetails();\n    }, [sku]);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    return (\n        <div className=\"product-detail\">\n            {product && (\n                <>\n                    <h1>{product.name}</h1>\n                    {product.small_image && product.small_image.url ? (\n                        <img src={product.small_image.url} alt={product.small_image.label} className=\"product-image\" />\n                    ) : (\n                        <p>No image available</p>\n                    )}\n                    <p>{product.description}</p>\n                    <p>Price: {product.price.regularPrice.amount.value} {product.price.regularPrice.amount.currency}</p>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default ProductDetail;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}